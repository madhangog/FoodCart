{"version":3,"sources":["images.jpeg","images (1).jpeg","noodles.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faTrash","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelect","event","target","value","setState","selected","console","log","state","handleRemove","list2","list1","map","item","index","splice","push","handleAdd","renderImage","react_default","a","createElement","Card","Clearfix","tag","style","display","alignItems","width","src","require","alt","CardBody","CardTitle","CardSubtitle","bind","assertThisInitialized","_this2","className","Navbar","dark","inverse","fluid","Nav","textAlign","alignContent","NavItem","Button","color","size","Container","ListGroup","ListGroupItem","onClick","active","marginTop","key","Row","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2020ba4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/images.4c541f4e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/images (1).54b20fba.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/noodles.3fd7965b.jpg\";","import React from 'react';\nimport './App.css';\n// import ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { Button , Container, Row, ListGroup, ListGroupItem ,Card,CardBody, CardSubtitle, CardTitle} from 'reactstrap';\nimport { Nav,Navbar, NavItem } from 'reactstrap';\n\n\n\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list1: ['abc',\n            'pqr',\n           'xyz'],\n      list2:[],\n      selected:''\n    };\n    this.handleSelect =this.handleSelect.bind(this)\n    this.handleRemove =this.handleRemove.bind(this)\n    this.handleAdd =this.handleAdd.bind(this)\n    this.renderImage = this.renderImage.bind(this)\n    console.log(this.state)\n  }\n\n\n  handleSelect = (event) =>{\n    if (event.target.value === 'abc'){\n       this.setState({selected:'abc'});\n      }\n   if (event.target.value === 'pqr'){\n     this.setState({selected:'pqr'});\n    }\n  if( event.target.value === 'xyz'){\n    this.setState({selected:'xyz'});\n  }\n  console.log(this.state);\n }\n\n\n handleRemove = () =>{\n   const selected = this.state.selected;\n   const list2 =this.state.list2;\n    this.state.list1.map(( item , index) =>{\n      \n      if(this.state.list1[index] ===selected){\n        const a = item ;\n        this.setState(this.state.list1.splice(index, 1));\n        this.setState( () => { list2.push(item)});\n      }\n    })\n  }\n\n    handleAdd = () =>{\n      const selected = this.state.selected;\n      const list1 =this.state.list1;\n       this.state.list2.map(( item , index) =>{\n         \n         if(this.state.list2[index] ===selected){\n           const a = item ;\n           this.setState(this.state.list2.splice(index, 1));\n           this.setState( () => { list1.push(item)});\n         }\n        })\n      }\n    \n      renderImage = (item) =>{\n        console.log(\"new\",item)\n\n        if (item==='abc'){return <Card Clearfix tag='button' ><div style={{\n          display: 'flex',\n          alignItems: 'center',\n\n        }}>\n          <img width=\"120\" src={require(\"./images.jpeg\")} alt=\"Card image cap\" />\n        <Card >\n          <CardBody >\n            <CardTitle>Chicken Fry</CardTitle>\n            <CardSubtitle >$ 9</CardSubtitle>\n          </CardBody>\n        </Card>\n        \n        </div></Card>}\n        if (item==='pqr'){return <Card  tag='button' ><div style={{\n          display: 'flex',\n          alignItems: 'center',\n          \n        }}>\n          <img width=\"120\" src={require(\"./images (1).jpeg\")} alt=\"Card image cap\" />\n        <Card >\n          <CardBody >\n            <CardTitle>Tandoori</CardTitle>\n            <CardSubtitle >$ 25</CardSubtitle>\n          </CardBody>\n        </Card>\n        \n        </div></Card>}\n        if (item==='xyz'){return <Card tag='button' ><div   style={{\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <img width=\"120\" src={require(\"./noodles.jpg\")} alt=\"Card image cap\" />\n        <Card >\n          <CardBody >\n            <CardTitle>Noodles</CardTitle>\n            <CardSubtitle >$ 25</CardSubtitle>\n          </CardBody>\n        </Card>\n        \n        </div></Card>}\n      }\n\n render(){\n\n  return (\n    <div>\n  <div  className='home '><Navbar dark inverse fluid>\n    <Nav style={{textAlign:'right', width:'100% ',alignContent:'right'}}>\n      <NavItem>\n        <Button color ='warning'  size='sm'>\n          About\n        </Button>\n      </NavItem>\n      <Button color ='warning'  size='sm'>\n          Contact\n        </Button>\n    </Nav>\n    </Navbar>\n\n<hr></hr>\n</div>\n\n    <div className=\"body1 \" style={{\n      display: 'flex',\n      alignItems: 'center'\n    }}>\n      <div className=\"App1\">\n        <header>\n          <Container>\n          <ListGroup>\n          {\n            this.state.list1.map(item => {\n            console.log(item)\n            console.log(this.state)\n            if(this.state.selected === item){\n            console.log(\"incoming\")\n            return <ListGroupItem tag=\"button\" onClick= {this.handleSelect} value = {item} active style={{marginTop:20}} key={item}>\n                {this.renderImage(item)}\n            </ListGroupItem>\n            }\n            else{\n            return  <ListGroupItem tag=\"button\"  onClick= {this.handleSelect} value = {item} style={{marginTop:20}} key={item}>\n              {this.renderImage(item)}\n            </ListGroupItem>\n    }})\n  }\n          </ListGroup>\n          </Container>\n        </header>\n      </div>\n      <div alignItems = 'center' >\n        <Row><Button onClick={this.handleRemove} color=\"warning\">Accept</Button>{' '}</Row>\n        <hr></hr>\n        <hr></hr>\n        <Row><Button  onClick={this.handleAdd} color=\"warning\">Reject</Button>{' '}</Row>\n      </div>\n      <div className=\"App1\">\n        <header>\n        <Container>\n          <ListGroup>\n          {\n            this.state.list2.map(item => {\n            console.log(item)\n            console.log(this.state)\n            if(this.state.selected === item){\n            console.log(\"incoming\")\n            return <ListGroupItem tag=\"button\" onClick= {this.handleSelect} value = {item} active style={{marginTop:20}} key={item}> {this.renderImage(item)}</ListGroupItem>\n            }\n            else{\n            return  <ListGroupItem tag=\"button\"  onClick= {this.handleSelect} value = {item} style={{marginTop:20}} key={item}> {this.renderImage(item)}</ListGroupItem>\n    }})\n  }\n          </ListGroup>\n          </Container>\n        </header>\n  </div>\n  </div>\n  </div>\n\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          \n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}